import os
import logging
from flask import Flask, request, jsonify
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TELEGRAM_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    ADMIN_CHAT_ID = os.environ['TELEGRAM_ADMIN_CHAT_ID']
    SECRET_TOKEN = os.environ.get('WEBHOOK_SECRET', 'default-secret-token')
except KeyError:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∑–∞–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é
    print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
    TELEGRAM_TOKEN = "–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    ADMIN_CHAT_ID = "–í–ê–®_–ß–ê–¢_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat ID
    SECRET_TOKEN = "test-secret-token"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ================ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ================
async def handle_order(update: Update, context):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /order"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ó–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ ApteDoc AI Assistant",
        parse_mode=ParseMode.MARKDOWN
    )


# ================ –í–µ–±—Ö—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ================
@app.route('/order_webhook', methods=['POST'])
def order_webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if request.headers.get('X-Telegram-Secret') != SECRET_TOKEN:
            return jsonify({"status": "error", "message": "Unauthorized"}), 401

        order_data = request.json['order']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üö® *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑* #{order_data['order_number']}\n"
            f"üì¶ **–ü—Ä–µ–ø–∞—Ä–∞—Ç**: {order_data['medicine']}\n"
            f"üè∑ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ**: {order_data['quantity']}\n"
            f"üìç **–ê–¥—Ä–µ—Å**: {order_data['delivery_address']}\n"
            f"üíä **–ê–ø—Ç–µ–∫–∞**: {order_data.get('pharmacy', '–ê–ø—Ç–µ–∫–∞.—Ä—É')}\n"
            f"üí≥ **–û–ø–ª–∞—Ç–∞**: {order_data.get('payment_method', '–û–Ω–ª–∞–π–Ω')}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            parse_mode=ParseMode.MARKDOWN
        )

        return jsonify({"status": "success"})

    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500


# ================ –¢–µ—Å—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ================
@app.route('/test', methods=['GET'])
def test_endpoint():
    """–ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-—Ç–µ—Å—Ç"""
    return "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_notification –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"


@app.route('/test_notification', methods=['GET'])
def test_notification():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        test_data = {
            "order": {
                "order_number": "TEST-123",
                "medicine": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç",
                "quantity": 3,
                "delivery_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –¥.1",
                "pharmacy": "–¢–µ—Å—Ç–æ–≤–∞—è –∞–ø—Ç–µ–∫–∞",
                "payment_method": "–ö–∞—Ä—Ç–æ–π"
            }
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üö® *–¢–ï–°–¢–û–í–´–ô –ó–ê–ö–ê–ó* #{test_data['order']['order_number']}\n"
            f"üì¶ **–ü—Ä–µ–ø–∞—Ä–∞—Ç**: {test_data['order']['medicine']}\n"
            f"üè∑ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ**: {test_data['order']['quantity']}\n"
            f"üìç **–ê–¥—Ä–µ—Å**: {test_data['order']['delivery_address']}\n"
            f"üíä **–ê–ø—Ç–µ–∫–∞**: {test_data['order'].get('pharmacy', '–ê–ø—Ç–µ–∫–∞.—Ä—É')}\n"
            f"üí≥ **–û–ø–ª–∞—Ç–∞**: {test_data['order'].get('payment_method', '–û–Ω–ª–∞–π–Ω')}"
        )

        bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            parse_mode=ParseMode.MARKDOWN
        )

        return jsonify({
            "status": "success",
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


# ================ –ó–∞–ø—É—Å–∫ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ================
def setup_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", handle_order))
    application.add_handler(CommandHandler("order", handle_order))
    return application


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
    application = setup_telegram()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üü¢ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    print("üü¢ Flask —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    print("–¢–µ—Å—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  http://localhost:5000/test")
    print("  http://localhost:5000/test_notification")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading


    def run_flask():
        app.run(debug=True, use_reloader=False)


    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    application.run_polling()